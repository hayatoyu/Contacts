using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;


namespace Contacts.ContactorClass
{
    class GetFromCSV : ContactGetter
    {
        public List<People> GetContact()
        {
            List<People> Contacts = new List<People>();
            Console.WriteLine("========== 正在讀取本地 csv 文件 ==========");
            string filepath = System.Environment.CurrentDirectory + @"\Contacts.csv";

            CheckLastUpdateTime(filepath);

            try
            {

                using (StreamReader sr = new StreamReader(filepath, EncodingDetection(filepath)))
                {
                    while (sr.Peek() >= 0)
                    {
                        string line = sr.ReadLine();
                        if (!line.Contains("<EOF>"))
                        {
                            line = line.TrimEnd().Replace("\t", ",");
                            string[] contact = line.Split(',');
                            People p = new People
                            {
                                Name = contact[0],
                                Extension = contact[1],
                                Depart = contact[2],
                                SpecialSys = contact.Length > 3 ? contact[3] : string.Empty,
                                Notes = contact.Length > 4 ? contact[4] : string.Empty
                            };

                            Contacts.Add(p);
                        }
                        else
                            break;
                    }
                }
                Console.WriteLine("========== 讀取完成，請參考說明使用 ==========\n");
                
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine(" ===== 發生錯誤，程式即將關閉 =====\n請按任意鍵繼續...");
                Console.ReadKey();
                System.Environment.Exit(1);
            }
            return Contacts;
        }

        private Encoding EncodingDetection(string filepath)
        {
            Encoding CE = null;
            try
            {
                using (StreamReader sr = new StreamReader(filepath, Encoding.Default))
                {
                    sr.Read();
                    CE = sr.CurrentEncoding;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            return CE;
        }

        public List<P_Status> GetStatus()
        {
            return new List<P_Status>();
        }

        private void CheckLastUpdateTime(string filepath)
        {
            // 先檢查csv最後更新日期與資料庫中版本是否一致
            DateTime SQLLastUpdateTime = new DateTime();
            FileInfo fInfo = new FileInfo(filepath);
            List<People> Contacts = new List<People>();
            Console.WriteLine("csv文件最後修改時間： {0}", fInfo.LastWriteTime);
            Console.WriteLine("正在檢查資料庫最後更新時間...");
            

            // 透過Restful取得通訊資料，回傳資料比較新的話，更新csv
            try
            {
                string url = "http://10.10.4.57:9999/HyperledgerFabric/RestfulTestServiceImpl.svc/Contact";
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";
                using (StreamWriter sw = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    sw.Write(string.Empty);
                    sw.Flush();
                    sw.Close();
                }

                var httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (StreamReader sr = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    var obj = JsonConvert.DeserializeObject<GetRestResult>(sr.ReadToEnd());
                    SQLLastUpdateTime = obj.GetContactResult.list.Max(p => p.LastUpdateTime);
                    Contacts = obj.GetContactResult.list.ToList();
                }

            }
            catch (WebException ex)
            {
                Console.WriteLine(ex.Message);
            }

            if(SQLLastUpdateTime > fInfo.LastWriteTime)
            {
                try
                {
                    fInfo.Delete();
                }
                catch (DirectoryNotFoundException e)
                {
                    // 找不到這個檔案，可以直接存新檔就好
                    Console.WriteLine(e.Message);
                }
                catch (IOException e)
                {
                    // 檔案使用中，中止此方法
                    Console.WriteLine(e.Message);
                    return;
                }
                catch (UnauthorizedAccessException e)
                {
                    // 檔案無存取權限，中止此方法
                    Console.WriteLine(e.Message);
                    return;
                }

                // 存新的檔案
                StringBuilder stbr = new StringBuilder();                
                foreach (var p in Contacts)
                {
                    string line = string.Format("{0}\t{1}\t{2}\t{3}\t{4}", p.Name, p.Extension, p.Depart, p.SpecialSys, p.Notes);
                    stbr.AppendLine(line);
                }
                stbr.AppendLine("<EOF>");
                try
                {
                    using (var sw = new StreamWriter(filepath, false, Encoding.UTF8))
                    {
                        sw.WriteLine(stbr.ToString());
                        sw.Flush();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }                
            }
        }
    }
}
